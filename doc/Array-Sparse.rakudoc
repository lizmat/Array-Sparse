=begin pod

=head1 NAME

Array::Sparse - role for sparsely populated Arrays

=head1 SYNOPSIS

=begin code :lang<raku>

use Array::Sparse;

my @a is Array::Sparse;

=end code

=head1 DESCRIPTION

Exports an C<Array::Sparse> role that can be used to indicate the
implementation of an array (aka C<Positional>) that will not
allocate anything for indexes that are not used.  It also allows
indexes to be used that exceed the native integer size.

Unless memory is of the most importance, if you populate more
than 5% of the indexes, you will be better of just using a normal
array.

Since C<Array::Sparse> is a role, you can also use it as a base
for creating your own custom implementations of (sparse) arrays.

=head1 Iterating Methods

Methods that iterate over the sparse array, will only report
elements that actually exist.  This affects methods such as
C<.keys>, C<.values>, C<.pairs>, C<.kv>, C<.iterator>, C<.head>,
C<.tail>, etc.

=head1 SEE ALSO

If the numeric values of the sparse array do B<not> exceed the
native integer range, then the
L<C<Hash::int>|https://raku.land/zef:lizmat/Hash::int> may also
be of interest.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Array-Sparse .
Comments and Pull Requests are welcome.

If you like this module, or what Iâ€™m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2018, 2020, 2021, 2023, 2024, 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
